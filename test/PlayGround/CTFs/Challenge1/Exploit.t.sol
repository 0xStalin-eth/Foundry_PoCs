// SPDX-License-Identifier: MIT
pragma solidity ^0.8.25;

import "./License.sol";
import "./StakingManager.sol";

import "forge-std/Test.sol";
import "forge-std/console.sol";

import { IERC721Errors } from "@openzeppelin/contracts/token/ERC721/ERC721.sol";


contract Exploit is Test {
    License licenseContract;
    StakingManager stakingManager;
    address admin = makeAddr("admin");

    address staker1 = makeAddr("staker1");
    address staker2 = makeAddr("staker2");

    error ERC721NonexistentToken(uint256 tokenId);

    function setUp() public {
        licenseContract = new License(admin, "License", "STK");
        stakingManager = new StakingManager(address(licenseContract));

        vm.startPrank(admin);
        licenseContract.setStakingManager(address(stakingManager));

        licenseContract.mint(staker1);
        licenseContract.mint(staker2);
        licenseContract.mint(staker2);

        vm.stopPrank();
    }

    function test_validateInitialization() public {
        assertEq(address(stakingManager.licenseContract()),address(licenseContract));
    }

    function test_delegatorRegistrationExample_Staker1() public {
        uint256 licenseCount = 1;
        uint256[] memory tokenIds = new uint256[](licenseCount);
        tokenIds[0] = 0;

        bytes32 delegationID;

        vm.startPrank(staker1);
        delegationID = stakingManager.initiateDelegatorRegistration(tokenIds);
        stakingManager.completeDelegatorRegistration(delegationID);
        vm.stopPrank();

        assertEq(stakingManager.stakersWeight(staker1), 1);
    }

    function test_delegatorRegistrationExample_Staker2() public {
        uint256 licenseCount = 2;
        uint256[] memory tokenIds = new uint256[](licenseCount);
        tokenIds[0] = 1;
        tokenIds[1] = 2;

        bytes32 delegationID;

        vm.startPrank(staker2);
        delegationID = stakingManager.initiateDelegatorRegistration(tokenIds);
        stakingManager.completeDelegatorRegistration(delegationID);
        vm.stopPrank();

        assertEq(stakingManager.stakersWeight(staker2), 2);
    }

    function test_delegateAndUndelegate_Staker1() public {
        uint256 licenseCount = 1;
        uint256[] memory tokenIds = new uint256[](licenseCount);
        tokenIds[0] = 0;

        bytes32 delegationID;

        vm.startPrank(staker1);
        delegationID = stakingManager.initiateDelegatorRegistration(tokenIds);
        stakingManager.completeDelegatorRegistration(delegationID);
        assertEq(stakingManager.stakersWeight(staker1), 1);

        stakingManager.initiateDelegatorRemoval(delegationID);
        assertEq(stakingManager.stakersWeight(staker1), 0);

        stakingManager.completeDelegatorRemoval(delegationID);
        vm.stopPrank();
    }

    function test_transferNFTRevertsWhileItsDelegated() public {
        uint256 licenseCount = 1;
        uint256[] memory tokenIds = new uint256[](licenseCount);
        tokenIds[0] = 0;

        bytes32 delegationID;

        vm.startPrank(staker1);
        delegationID = stakingManager.initiateDelegatorRegistration(tokenIds);

        vm.expectRevert();
        licenseContract.safeTransferFrom(staker1, staker2, 0);

        stakingManager.completeDelegatorRegistration(delegationID);
        assertEq(stakingManager.stakersWeight(staker1), 1);

        vm.expectRevert();
        licenseContract.safeTransferFrom(staker1, staker2, 0);

        vm.stopPrank();
    }

    function test_delegateAndUndelegate_Staker2() public {
        uint256 licenseCount = 2;
        uint256[] memory tokenIds = new uint256[](licenseCount);
        tokenIds[0] = 1;
        tokenIds[1] = 2;

        bytes32 delegationID;

        vm.startPrank(staker2);
        delegationID = stakingManager.initiateDelegatorRegistration(tokenIds);
        stakingManager.completeDelegatorRegistration(delegationID);
        assertEq(stakingManager.stakersWeight(staker2), 2);

        stakingManager.initiateDelegatorRemoval(delegationID);
        assertEq(stakingManager.stakersWeight(staker2), 0);

        stakingManager.completeDelegatorRemoval(delegationID);
        vm.stopPrank();
    }

    function test_ctf_answer() public {

        // post checks //
        vm.expectRevert();
        licenseContract.ownerOf(3);

        //@audit-info => Staker1 must have inflated its weight to 10
        assertEq(stakingManager.stakersWeight(staker1), 10);
    }
}